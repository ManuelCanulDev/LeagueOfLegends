<?php
/*
Generated by Manuigniter v2.0
www.manuigniter.com
 */

defined('BASEPATH') or exit('No direct script access allowed');
require APPPATH . 'libraries/REST_Controller.php';
require APPPATH . 'libraries/Format.php';

header("Access-Control-Allow-Origin: *");
header("Access-Control-Allow-Methods: GET, POST, OPTIONS, PUT, DELETE");

class champions extends REST_Controller
{
    private $code01 = '001'; //CODIGO CORRECTO.
    private $code02 = '002'; //VALOR NO ENCONTRADO.
    private $code03 = '003'; //FALTAN PARAMETROS.
    private $code04 = '004'; //CODIGO NO CORRECTO.

    public function __construct()
    {
        parent::__construct();
        $this->load->model('Champions_model');
        $this->load->model('Habilities_model');
        $this->load->model('Stats_model');
        $this->load->model('Tips_model');
        $this->load->helper('text');
        $this->load->library('upload');
    }

    public function get_all_get()
    {
        $champions = $this->Champions_model->get_all_champions();

        $champion_habilities = $this->Habilities_model->get_all_habilities();

        $champion_stats = $this->Stats_model->get_all_stats();

        $champion_tips = $this->Tips_model->get_all_tips();

        if (count($champions) > 0) {

            $data = array();

            foreach ($champions as $champion) {

                $habilites = array();
                $stats = array();
                $tips = array();

                foreach ($champion_habilities as $hability) {
                    if ($hability['champion'] == $champion['id']) {

                        array_push($habilites, array(
                            'id' => $hability['id'],
                            'name' => $hability['name'],
                            'description' => $hability['description'],
                            'effect' => $hability['effect'],
                            'cost' => $hability['cost'],
                            'range' => $hability['range'],
                            'image' => 'spells/' . $champion['id'] . '-' . $hability['id'] . '.png',
                        ));
                    }
                }

                foreach ($champion_stats as $statss) {
                    if ($statss['champion'] == $champion['id']) {

                        array_push($stats, array(
                            'name' => $statss['name'],
                            'value' => $statss['value'],
                            'modifier_per_level' => $statss['modifier_per_level'],
                        ));
                    }
                }

                foreach ($champion_tips as $tipss) {
                    if ($tipss['champion'] == $champion['id']) {

                        array_push($tips, array(
                            'id' => $tipss['id'],
                            'tip' => $tipss['tip'],
                        ));
                    }
                }

                array_push($data, array(
                    'id' => $champion['id'],
                    'name' => $champion['name'],
                    'title' => $champion['title'],
                    'lore' => word_limiter($champion['lore'], 100),
                    'tags' => $champion['tags'],
                    'image' => 'portraits/' . $champion['id'] . '.jpg',
                    'icon' => 'icons/' . $champion['id'] . '.jpg',
                    'habilities' => $habilites,
                    'stats' => $stats,
                    'tips' => $tips,
                ));
            }

            $this->response([
                'status' => true,
                'error' => false,
                'message' => "OK",
                'system_code' => $this->code01,
                'data' => $data,
            ], 200);

        } else {
            $this->response([
                'status' => false,
                'error' => true,
                'message' => 'ERROR',
                'system_code' => $this->code02,
            ], 200);
        }
    }

    public function get_get()
    {
        $id_champion = trim($this->get('id', true));

        $champion = $this->Champions_model->get_champion($id_champion);

        $habilites = $this->Habilities_model->get_habilities_by_champion($id_champion);

        $habilites_new = array();

        foreach ($habilites as $hability) {
            if ($hability['champion'] == $champion['id']) {

                array_push($habilites_new, array(
                    'id' => $hability['id'],
                    'name' => $hability['name'],
                    'description' => $hability['description'],
                    'effect' => $hability['effect'],
                    'cost' => $hability['cost'],
                    'range' => $hability['range'],
                    'image' => 'spells/' . $champion['id'] . '-' . $hability['id'] . '.png',
                ));
            }
        }

        $stats = $this->Stats_model->get_stats_by_champion($id_champion);

        $stats_new = array();

        foreach ($stats as $statss) {
            if ($statss['champion'] == $champion['id']) {

                array_push($stats_new, array(
                    'id' => $statss['id'],
                    'name' => $statss['name'],
                    'value' => $statss['value'],
                    'modifier_per_level' => $statss['modifier_per_level'],
                ));
            }
        }

        $tips = $this->Tips_model->get_all_tips();
        $tips_new = array();

        foreach ($tips as $tipss) {
            if ($tipss['champion'] == $champion['id']) {

                array_push($tips_new, array(
                    'id' => $tipss['id'],
                    'tip' => $tipss['tip'],
                ));
            }
        }

        $campeon = array();

        array_push($campeon, array(
            'id' => $champion['id'],
            'name' => $champion['name'],
            'title' => $champion['title'],
            'lore' => $champion['lore'],
            'tags' => $champion['tags'],
            'image' => base_url() . 'resources/portraits/' . $champion['id'] . '.jpg',
            'icon' => base_url() . 'resources/icons/' . $champion['id'] . '.jpg',
            'habilities' => $habilites_new,
            'stats' => $stats_new,
            'tips' => $tips_new,
        ));

        if ($champion != null) {
            $this->response([
                'status' => true,
                'error' => false,
                'message' => "OK",
                'system_code' => $this->code01,
                'data' => $campeon,
            ], 200);
        } else {
            $this->response([
                'status' => false,
                'error' => true,
                'message' => 'ERROR',
                'system_code' => $this->code03,
            ], 200);
        }
    }

    public function add_post()
    {
        $name = $this->input->post('name');
        $title = $this->input->post('title');
        $lore = $this->input->post('lore');
        $tags = $this->input->post('tags');

        //echo "name => ".$name;

        if ($name == '' || $title == '' || $lore == '' || $tags == '') {
            $this->response([
                'status' => false,
                'error' => true,
                'message' => 'ERROR',
                'system_code' => $this->code03,
            ], 400);
        } else {
            if (isset($_FILES["image"]["name"]) && isset($_FILES["icon"]["name"])) {

                $ultimo_id = $this->Champions_model->get_last_id();

                $nuevo_id = $ultimo_id + 1;

                $champion = array(
                    'id' => $nuevo_id,
                    'name' => $name,
                    'title' => $title,
                    'lore' => $lore,
                    'tags' => $tags,
                );

                $id_champion = $this->Champions_model->add_champion($champion);

                $champion = $this->Champions_model->get_champion($nuevo_id);

                $config['upload_path'] = './resources/portraits/';
                $config['allowed_types'] = 'jpg|jpeg|png|gif';
                $new_name1 = $nuevo_id;
                $config['file_name'] = $new_name1;
                $this->upload->initialize($config);
                if ($this->upload->do_upload('image')) {

                    $config2['upload_path'] = './resources/icons/';
                    $config2['allowed_types'] = 'jpg|jpeg|png|gif';
                    $new_name2 = $nuevo_id;
                    $config2['file_name'] = $new_name2;
                    $this->upload->initialize($config2);
                    if ($this->upload->do_upload('icon')) {
                        $this->response([
                            'status' => true,
                            'error' => false,
                            'message' => "OK",
                            'system_code' => $this->code01,
                            'data' => $champion,
                        ], 200);
                    } else {
                        $this->response([
                            'status' => false,
                            'error' => true,
                            'message' => 'ERROR: ' . $this->code04,
                            'system_code' => $this->code04,
                        ], 400);
                    }
                } else {
                    $this->response([
                        'status' => false,
                        'error' => true,
                        'message' => 'ERROR: ' . $this->code04,
                        'system_code' => $this->code04,
                    ], 400);
                }
            } else {
                $this->response([
                    'status' => false,
                    'error' => true,
                    'message' => 'ERROR: ' . $this->code03,
                    'system_code' => $this->code03,
                ], 400);
            }
        }
    }

    public function delete_post()
    {
        $id_champion = $this->post('id_champion');

        if ($id_champion != '') {
            $status_borrado = $this->Champions_model->delete_champion($id_champion);
            if ($status_borrado) {
                $this->response([
                    'status' => true,
                    'error' => false,
                    'message' => 'OK',
                    'system_code' => $this->code01,
                ], 200);
            } else {
                $this->response([
                    'status' => false,
                    'error' => true,
                    'message' => 'ERROR',
                    'system_code' => $this->code02,
                ], 200);
            }
        } else {
            $this->response([
                'status' => false,
                'error' => true,
                'message' => 'ERROR: ' . $this->code03,
                'system_code' => $this->code03,
            ], 200);
        }
    }

    public function delete_get()
    {
        $id_champion = $this->get('id_champion');

        if ($id_champion != '') {
            $status_borrado = $this->Champions_model->delete_champion($id_champion);
            if ($status_borrado) {
                $this->response([
                    'status' => true,
                    'error' => false,
                    'message' => 'OK',
                    'system_code' => $this->code01,
                ], 200);
            } else {
                $this->response([
                    'status' => false,
                    'error' => true,
                    'message' => 'ERROR',
                    'system_code' => $this->code02,
                ], 200);
            }
        } else {
            $this->response([
                'status' => false,
                'error' => true,
                'message' => 'ERROR: ' . $this->code03,
                'system_code' => $this->code03,
            ], 200);
        }
    }

    public function update_post()
    {
        $id_champion = $this->post('id_champion');
        $name = $this->post('name');
        $title = $this->post('title');
        $lore = $this->post('lore');
        $tags = $this->post('tags');

        if ($name == '' || $title == '' || $lore == '' || $tags == '' || $id_champion == '') {
            $this->response([
                'status' => false,
                'error' => true,
                'message' => 'Faltan Argumentos.',
            ], 400);
        } else {

            $champion = $this->Champions_model->get_champion($id_champion);

            if (isset($champion['id'])) {
                $params = array(
                    'name' => $name,
                    'title' => $title,
                    'lore' => $lore,
                    'tags' => $tags
                );

                if ($this->Champions_model->update_champion($params, $id_champion)) {

                    $championNew = $this->Champions_model->get_champion($id_champion);

                    $this->response([
                        'status' => true,
                        'error' => false,
                        'message' => "OK",
                        'system_code' => $this->code01,
                        'data' => $championNew,
                    ], 200);
                } else {
                    $this->response([
                        'status' => false,
                        'error' => true,
                        'message' => 'ERROR',
                        'system_code' => $this->code04,
                    ], 200);
                }
            } else {
                $this->response([
                    'status' => false,
                    'error' => true,
                    'message' => 'ERROR',
                    'system_code' => $this->code03,
                ], 200);
            }
        }
    }

    public function login()
    {
        $this->_apiConfig([
            'methods' => ['POST', 'GET'],
            'requireAuthorization' => true,
        ]);
    }
}
